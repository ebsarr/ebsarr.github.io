<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on btaars.net</title>
    <link>https://blog.btaars.net/categories/golang/</link>
    <description>Recent content in golang on btaars.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Aug 2019 23:53:59 +0900</lastBuildDate>
    <atom:link href="/categories/golang/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Function parameters in golang</title>
      <link>https://blog.btaars.net/post/function-parameters-in-golang/</link>
      <pubDate>Wed, 28 Aug 2019 23:53:59 +0900</pubDate>
      
      <guid>https://blog.btaars.net/post/function-parameters-in-golang/</guid>
      <description>Today I want to share a simple concept that I found useful when writing functions in go. Before jumping in, I want to talk about context to better illustrate the use case. A couple of years ago, I developed a simple CLI tool to interact with packet cloud using their go SDK . As you may guess, the CLI tool had to implement all the major operations/functions provided by the cloud, meaning create, start, stop servers, manage the network environment etc &amp;hellip; The first step was to create a function for each operation, and each function would define the options and parameters that would be submitted to the corresponding packet API.</description>
    </item>
    
  </channel>
</rss>
